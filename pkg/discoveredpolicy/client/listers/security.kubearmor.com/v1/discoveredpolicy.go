/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/accuknox/auto-policy-discovery/pkg/discoveredpolicy/api/security.kubearmor.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DiscoveredPolicyLister helps list DiscoveredPolicies.
// All objects returned here must be treated as read-only.
type DiscoveredPolicyLister interface {
	// List lists all DiscoveredPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DiscoveredPolicy, err error)
	// DiscoveredPolicies returns an object that can list and get DiscoveredPolicies.
	DiscoveredPolicies(namespace string) DiscoveredPolicyNamespaceLister
	DiscoveredPolicyListerExpansion
}

// discoveredPolicyLister implements the DiscoveredPolicyLister interface.
type discoveredPolicyLister struct {
	indexer cache.Indexer
}

// NewDiscoveredPolicyLister returns a new DiscoveredPolicyLister.
func NewDiscoveredPolicyLister(indexer cache.Indexer) DiscoveredPolicyLister {
	return &discoveredPolicyLister{indexer: indexer}
}

// List lists all DiscoveredPolicies in the indexer.
func (s *discoveredPolicyLister) List(selector labels.Selector) (ret []*v1.DiscoveredPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DiscoveredPolicy))
	})
	return ret, err
}

// DiscoveredPolicies returns an object that can list and get DiscoveredPolicies.
func (s *discoveredPolicyLister) DiscoveredPolicies(namespace string) DiscoveredPolicyNamespaceLister {
	return discoveredPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DiscoveredPolicyNamespaceLister helps list and get DiscoveredPolicies.
// All objects returned here must be treated as read-only.
type DiscoveredPolicyNamespaceLister interface {
	// List lists all DiscoveredPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DiscoveredPolicy, err error)
	// Get retrieves the DiscoveredPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.DiscoveredPolicy, error)
	DiscoveredPolicyNamespaceListerExpansion
}

// discoveredPolicyNamespaceLister implements the DiscoveredPolicyNamespaceLister
// interface.
type discoveredPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DiscoveredPolicies in the indexer for a given namespace.
func (s discoveredPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1.DiscoveredPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DiscoveredPolicy))
	})
	return ret, err
}

// Get retrieves the DiscoveredPolicy from the indexer for a given namespace and name.
func (s discoveredPolicyNamespaceLister) Get(name string) (*v1.DiscoveredPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("discoveredpolicy"), name)
	}
	return obj.(*v1.DiscoveredPolicy), nil
}
